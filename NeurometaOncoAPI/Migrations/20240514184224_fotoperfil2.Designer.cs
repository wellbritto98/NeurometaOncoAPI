// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeurometaOncoAPI.Infraestructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeurometaOncoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240514184224_fotoperfil2")]
    partial class fotoperfil2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Name = "Psicologo",
                            NormalizedName = "PSICOLOGO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "108a512c-a147-4db6-a384-077f88de02c7",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "3823ecb1-ad13-4cb4-b131-78325ab57622",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "70517581-782a-4ccf-9dbe-cc27fe96f59d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "c0a13081-1138-47f3-98df-1425854aac1b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "9e50ba3c-9cc7-4f53-976f-92fe954ccecf",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "93ff7dfb-8320-479d-b873-9c19a95c63ec",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "ae0cc099-178c-4b2c-90b2-08f40f2920f7",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "75b9c1ef-6f79-4ac8-a219-a15bc1931546",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "61561c15-ba1c-4a4f-abf2-982351332d2c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b007b669-2179-4daf-a23f-826a79383847",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "cc58ab93-5387-431f-95ee-d6dbd8f7b9d5",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "26cfbc5f-29dc-4b9d-982e-3902a52fc4ff",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("PsicologoId", "Data", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "108a512c-a147-4db6-a384-077f88de02c7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39b5e8e5-1c7f-4ea9-97b8-0c8be74f2b6c",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 1",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEG5qO0DVXPV290hxTYn2wjPL7A8AsMOxvdhKKMi6QRfd2+91aCQQnKH1w7pZ+jt5yA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 279, DateTimeKind.Local).AddTicks(5419),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "3823ecb1-ad13-4cb4-b131-78325ab57622",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ae307c8-bb5d-4b19-9c98-787f9f266eb6",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 2",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEDrvJibQw8s/K+MDwWP9Ye9M5G5UG0+AHs3qvvwRKsmxgvZ5zEO3Z1m8Lnna7h1Y6Q==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 338, DateTimeKind.Local).AddTicks(8885),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "70517581-782a-4ccf-9dbe-cc27fe96f59d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "085e80b1-690e-4615-a313-03a740bafee5",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 3",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAENx/LON8XOimUa8M+zp17/qGwch2tsCKAzExH+Tm+3b0k5wImBan8yLBWvewxttpWA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 399, DateTimeKind.Local).AddTicks(6322),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "c0a13081-1138-47f3-98df-1425854aac1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b59d5ec-9d4b-4be1-b044-a984e27548bb",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 4",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEJQiANCpKxej68FGOJzMt5asj5xYDh7eeCkxcIAOSyCgK9F3CWdnJw1ycIut0eqfvQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 474, DateTimeKind.Local).AddTicks(3445),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "9e50ba3c-9cc7-4f53-976f-92fe954ccecf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5315c46f-88f3-48e5-b098-8f39c8568b06",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 5",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEPL0THDdd99rkVfxqxLCnsrvfJt5tDsNogEE4HTGLWKnZkvYYnzkdQoZXphpEU0KrA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 537, DateTimeKind.Local).AddTicks(6001),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "93ff7dfb-8320-479d-b873-9c19a95c63ec",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "dbe5b76c-094f-4d19-af35-9b455dd21ff4",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 6",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnJyFi3sjA9i6C0qS84MrXQnplpfN3YKxBqAGfClZt7Z1r8NiwVi3ols53P+H6jQw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 595, DateTimeKind.Local).AddTicks(5018),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "ae0cc099-178c-4b2c-90b2-08f40f2920f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a3bd08d-551d-497c-b5a9-a54338baafdf",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 7",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEPm4K6Rzdq1Oin+VQMBlyynVpmPn06OT915/ZI7zreknd3Xlpud3VFe1tViZywh1Lg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 669, DateTimeKind.Local).AddTicks(3930),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "75b9c1ef-6f79-4ac8-a219-a15bc1931546",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "26736314-4c36-44de-ad84-23f91867cf4d",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 8",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAELqtjBb6xy5XkNlMRypzjrxGGC6+9+LtNHWuA2A+IN4lUeJQueiCj0U96kc8H4lACQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 747, DateTimeKind.Local).AddTicks(4224),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "61561c15-ba1c-4a4f-abf2-982351332d2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "98e9ddca-56d7-4297-9f37-500ad56f959a",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 9",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEJG8/Ezc9dOr98Y/lCRaQhsGZTMf5nLd/mqR93BJ+bap362gecUh7jE0wj9XM+ltwA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 823, DateTimeKind.Local).AddTicks(4884),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "b007b669-2179-4daf-a23f-826a79383847",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b1d9b63d-b89f-4ffb-b948-31b6a8d9aa2c",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 10",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEN2nxZIs4qpY3Rkwf3bWmY8GR3yTs5xNK0o676HxbPrYW0YavPMj0ps69m2jrjU6MQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 880, DateTimeKind.Local).AddTicks(9895),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "cc58ab93-5387-431f-95ee-d6dbd8f7b9d5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1a4e11a-90d6-4694-aaee-9cdd2cacd172",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 11",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEDR/i+o2K/NZmqwMCxJpVe3vfos/4MlTPrctMnC9/R3XRttDy2wY7Gwp1Gw1CrOR0g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 939, DateTimeKind.Local).AddTicks(4285),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "26cfbc5f-29dc-4b9d-982e-3902a52fc4ff",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3d5b63e6-2dfb-4ecf-81de-cd34e85eb934",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 12",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAECMSqtYvbgM0dCU1qzZ3hpay1g94WE5hE0iAbmwgCcKtNHEX//Cdo2CYMDZvUp7yEQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 15, 42, 22, 998, DateTimeKind.Local).AddTicks(7935),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12",
                            role = "Paciente"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.ExampleEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ComprovanteResidencia")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoRgFrente")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("FotoRgVerso")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PDFFormatado")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RelatorioMedico")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = "ae0cc099-178c-4b2c-90b2-08f40f2920f7",
                            Cid = "CID-7",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 55 },
                            CrmMedico = 7,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 55 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 55 },
                            NomeMedico = "Medico 7",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 55 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 55 },
                            UfCrm = "UF-7"
                        },
                        new
                        {
                            PacienteId = "75b9c1ef-6f79-4ac8-a219-a15bc1931546",
                            Cid = "CID-8",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 56 },
                            CrmMedico = 8,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 56 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 56 },
                            NomeMedico = "Medico 8",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 56 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 56 },
                            UfCrm = "UF-8"
                        },
                        new
                        {
                            PacienteId = "61561c15-ba1c-4a4f-abf2-982351332d2c",
                            Cid = "CID-9",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 57 },
                            CrmMedico = 9,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 57 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 57 },
                            NomeMedico = "Medico 9",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 57 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 57 },
                            UfCrm = "UF-9"
                        },
                        new
                        {
                            PacienteId = "b007b669-2179-4daf-a23f-826a79383847",
                            Cid = "CID-10",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 48 },
                            CrmMedico = 10,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 48 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 48 },
                            NomeMedico = "Medico 10",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 48 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 48 },
                            UfCrm = "UF-10"
                        },
                        new
                        {
                            PacienteId = "cc58ab93-5387-431f-95ee-d6dbd8f7b9d5",
                            Cid = "CID-11",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 49 },
                            CrmMedico = 11,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 49 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 49 },
                            NomeMedico = "Medico 11",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 49 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 49 },
                            UfCrm = "UF-11"
                        },
                        new
                        {
                            PacienteId = "26cfbc5f-29dc-4b9d-982e-3902a52fc4ff",
                            Cid = "CID-12",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 50 },
                            CrmMedico = 12,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 50 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 50 },
                            NomeMedico = "Medico 12",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 50 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 50 },
                            UfCrm = "UF-12"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("CarteiraCrp")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PsicologoId");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            PsicologoId = "108a512c-a147-4db6-a384-077f88de02c7",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 49 },
                            Crp = "CRP-1",
                            Descricao = "Psicologo 1"
                        },
                        new
                        {
                            PsicologoId = "3823ecb1-ad13-4cb4-b131-78325ab57622",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 50 },
                            Crp = "CRP-2",
                            Descricao = "Psicologo 2"
                        },
                        new
                        {
                            PsicologoId = "70517581-782a-4ccf-9dbe-cc27fe96f59d",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 51 },
                            Crp = "CRP-3",
                            Descricao = "Psicologo 3"
                        },
                        new
                        {
                            PsicologoId = "c0a13081-1138-47f3-98df-1425854aac1b",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 52 },
                            Crp = "CRP-4",
                            Descricao = "Psicologo 4"
                        },
                        new
                        {
                            PsicologoId = "9e50ba3c-9cc7-4f53-976f-92fe954ccecf",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 53 },
                            Crp = "CRP-5",
                            Descricao = "Psicologo 5"
                        },
                        new
                        {
                            PsicologoId = "93ff7dfb-8320-479d-b873-9c19a95c63ec",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 54 },
                            Crp = "CRP-6",
                            Descricao = "Psicologo 6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", "Psicologo")
                        .WithMany("Agendas")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Pacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Psicologos")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Navigation("Pacientes");

                    b.Navigation("Psicologos");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
