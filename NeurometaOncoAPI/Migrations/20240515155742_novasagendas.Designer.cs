// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeurometaOncoAPI.Infraestructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeurometaOncoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240515155742_novasagendas")]
    partial class novasagendas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Name = "Psicologo",
                            NormalizedName = "PSICOLOGO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("PsicologoId", "Data", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            PsicologoId = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 442, DateTimeKind.Local).AddTicks(2050),
                            PacienteId = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 442, DateTimeKind.Local).AddTicks(2071),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 442, DateTimeKind.Local).AddTicks(2059)
                        },
                        new
                        {
                            PsicologoId = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 442, DateTimeKind.Local).AddTicks(2091),
                            PacienteId = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 442, DateTimeKind.Local).AddTicks(2092),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 442, DateTimeKind.Local).AddTicks(2092)
                        },
                        new
                        {
                            PsicologoId = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 442, DateTimeKind.Local).AddTicks(2099),
                            PacienteId = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 442, DateTimeKind.Local).AddTicks(2100),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 442, DateTimeKind.Local).AddTicks(2100)
                        },
                        new
                        {
                            PsicologoId = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 506, DateTimeKind.Local).AddTicks(5194),
                            PacienteId = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 506, DateTimeKind.Local).AddTicks(5213),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 506, DateTimeKind.Local).AddTicks(5207)
                        },
                        new
                        {
                            PsicologoId = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 506, DateTimeKind.Local).AddTicks(5309),
                            PacienteId = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 506, DateTimeKind.Local).AddTicks(5310),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 506, DateTimeKind.Local).AddTicks(5310)
                        },
                        new
                        {
                            PsicologoId = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 506, DateTimeKind.Local).AddTicks(5326),
                            PacienteId = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 506, DateTimeKind.Local).AddTicks(5328),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 506, DateTimeKind.Local).AddTicks(5327)
                        },
                        new
                        {
                            PsicologoId = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 571, DateTimeKind.Local).AddTicks(9207),
                            PacienteId = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 571, DateTimeKind.Local).AddTicks(9227),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 571, DateTimeKind.Local).AddTicks(9210)
                        },
                        new
                        {
                            PsicologoId = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 571, DateTimeKind.Local).AddTicks(9243),
                            PacienteId = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 571, DateTimeKind.Local).AddTicks(9244),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 571, DateTimeKind.Local).AddTicks(9244)
                        },
                        new
                        {
                            PsicologoId = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 571, DateTimeKind.Local).AddTicks(9246),
                            PacienteId = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 571, DateTimeKind.Local).AddTicks(9247),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 571, DateTimeKind.Local).AddTicks(9247)
                        },
                        new
                        {
                            PsicologoId = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 632, DateTimeKind.Local).AddTicks(5245),
                            PacienteId = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 632, DateTimeKind.Local).AddTicks(5264),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 632, DateTimeKind.Local).AddTicks(5255)
                        },
                        new
                        {
                            PsicologoId = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 632, DateTimeKind.Local).AddTicks(5285),
                            PacienteId = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 632, DateTimeKind.Local).AddTicks(5286),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 632, DateTimeKind.Local).AddTicks(5285)
                        },
                        new
                        {
                            PsicologoId = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 632, DateTimeKind.Local).AddTicks(5288),
                            PacienteId = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 632, DateTimeKind.Local).AddTicks(5289),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 632, DateTimeKind.Local).AddTicks(5289)
                        },
                        new
                        {
                            PsicologoId = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 692, DateTimeKind.Local).AddTicks(1314),
                            PacienteId = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 692, DateTimeKind.Local).AddTicks(1317),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 692, DateTimeKind.Local).AddTicks(1316)
                        },
                        new
                        {
                            PsicologoId = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 692, DateTimeKind.Local).AddTicks(1337),
                            PacienteId = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 692, DateTimeKind.Local).AddTicks(1337),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 692, DateTimeKind.Local).AddTicks(1337)
                        },
                        new
                        {
                            PsicologoId = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 692, DateTimeKind.Local).AddTicks(1340),
                            PacienteId = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 692, DateTimeKind.Local).AddTicks(1340),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 692, DateTimeKind.Local).AddTicks(1340)
                        },
                        new
                        {
                            PsicologoId = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            Data = new DateTime(2024, 5, 14, 12, 57, 40, 752, DateTimeKind.Local).AddTicks(6072),
                            PacienteId = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            DataFim = new DateTime(2024, 5, 14, 13, 57, 40, 752, DateTimeKind.Local).AddTicks(6078),
                            DataInicio = new DateTime(2024, 5, 14, 12, 57, 40, 752, DateTimeKind.Local).AddTicks(6076)
                        },
                        new
                        {
                            PsicologoId = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            Data = new DateTime(2024, 5, 15, 12, 57, 40, 752, DateTimeKind.Local).AddTicks(6165),
                            PacienteId = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            DataFim = new DateTime(2024, 5, 15, 14, 57, 40, 752, DateTimeKind.Local).AddTicks(6166),
                            DataInicio = new DateTime(2024, 5, 15, 13, 57, 40, 752, DateTimeKind.Local).AddTicks(6165)
                        },
                        new
                        {
                            PsicologoId = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            Data = new DateTime(2024, 5, 16, 12, 57, 40, 752, DateTimeKind.Local).AddTicks(6180),
                            PacienteId = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            DataFim = new DateTime(2024, 5, 16, 15, 57, 40, 752, DateTimeKind.Local).AddTicks(6180),
                            DataInicio = new DateTime(2024, 5, 16, 14, 57, 40, 752, DateTimeKind.Local).AddTicks(6180)
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7e21e8dc-823c-4ab5-b827-378c272d750d",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 1",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEERGafjscToQ26SoYKcW+booW1g4DSMxZCOrY3t09f1qeXvCiT5YJG3ZUp0PxY78gQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 10, DateTimeKind.Local).AddTicks(1946),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6f272d02-90c8-412b-a944-9afb818cbf54",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 2",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEKqAlDOebVE+HWe+xsXwvZv0iff0/0PAmQl9cYAQYf/xo6r5LA6pL4BDugeewCt7bA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 79, DateTimeKind.Local).AddTicks(9944),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20b525ed-fa54-4d2d-a9c2-1b21d8591553",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 3",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEG7WkIiDKAeGi70E2j8S/+95JBn8eIyCgGFyN1587LfxrnApKNotCT3mhHvFyPa3HQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 150, DateTimeKind.Local).AddTicks(1461),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c184cb0-e9bd-4a3a-a4b8-14afe147d4f1",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 4",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAELYV9LAlZnXNpn21LiLCr3IyRUXPx1wmHuvP3h6xQ1PLrgKk5CYsXhR3c7f+asu5gw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 227, DateTimeKind.Local).AddTicks(4605),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "02dfc5d4-f8a2-4caa-892b-55d1f5d5204e",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 5",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEPEfZlguY79gJiQH9Bth4NUMA6mYmmIflntmLZjtQf92Xbk2/sXyE+sf4GxHqZNSzw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 300, DateTimeKind.Local).AddTicks(4438),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8016f791-cda9-410c-a064-eca467ed7176",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 6",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEL+Q3B9NSEXyIocOzdBaVycoNIILLK1hOPVsOy1a9G+0Q7E5KsWZQsxywSGsp7XRQQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 370, DateTimeKind.Local).AddTicks(7371),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8efc5715-07dd-480d-ac74-edc885b52a35",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 7",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEP2biIJ3ae0ZMnSE7/+qtnOfOatZPUUGkNf6qjzfmuO2R+s7NVVsGQWMM/C2+T7KtA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 442, DateTimeKind.Local).AddTicks(1759),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7ee475c9-dabe-4104-87a3-e990442816aa",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 8",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEMdQxBf5NU3CBTtRHLvCddXBvbsrou/bQhXPr+AHYIi2CM983iv2zGu3tqfqXlaYHQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 506, DateTimeKind.Local).AddTicks(4879),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d259826-754d-4d5a-a4a2-99993b2ce3e6",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 9",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEErsFwwd/igIn5DNumncV1tLAOwxmdhZtaNJCtzTi/j2C3F/HZJmVPo5vTQdWIRDGA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 571, DateTimeKind.Local).AddTicks(8985),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2703c090-59af-425b-b7a7-505ca4aad853",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 10",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEL1UMhmly+rvrxlEf3YljBf5YOWIh76ZDfO59zGz3X3Sd/aCD4GcsqR8SSChrCIp1g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 632, DateTimeKind.Local).AddTicks(5033),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3379bfe2-ad3c-484e-b4a2-1f2001a01575",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 11",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEGnjwZ4+qAYHUto4go1BMU62OYLuffFxZVn751k74TOPaEM/h5X+EKkrG9l9y0qBBg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 692, DateTimeKind.Local).AddTicks(968),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7747458b-db05-47ee-b8cc-7585778d3e67",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 12",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEAetgh10z+r/iRqKLqGQ+XN1xf2pRzFx+aagpZyxiuFDhUWIuoZ5c/sB9PFtOdRunw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 12, 57, 40, 752, DateTimeKind.Local).AddTicks(5767),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12",
                            role = "Paciente"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.ExampleEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ComprovanteResidencia")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoRgFrente")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("FotoRgVerso")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PDFFormatado")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RelatorioMedico")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = "42ea07ae-4f5a-4d34-961f-674806baa9da",
                            Cid = "CID-7",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 55 },
                            CrmMedico = 7,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 55 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 55 },
                            NomeMedico = "Medico 7",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 55 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 55 },
                            UfCrm = "UF-7"
                        },
                        new
                        {
                            PacienteId = "06308d61-318e-4d59-b5a5-83abcc436fca",
                            Cid = "CID-8",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 56 },
                            CrmMedico = 8,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 56 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 56 },
                            NomeMedico = "Medico 8",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 56 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 56 },
                            UfCrm = "UF-8"
                        },
                        new
                        {
                            PacienteId = "d6004cb8-8e9a-4e04-8e3c-a8f74eda18ee",
                            Cid = "CID-9",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 57 },
                            CrmMedico = 9,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 57 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 57 },
                            NomeMedico = "Medico 9",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 57 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 57 },
                            UfCrm = "UF-9"
                        },
                        new
                        {
                            PacienteId = "e6858a95-7e31-4d41-b741-82c238d1755b",
                            Cid = "CID-10",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 48 },
                            CrmMedico = 10,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 48 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 48 },
                            NomeMedico = "Medico 10",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 48 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 48 },
                            UfCrm = "UF-10"
                        },
                        new
                        {
                            PacienteId = "16ae5f23-68ca-484d-8052-309eb5d04895",
                            Cid = "CID-11",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 49 },
                            CrmMedico = 11,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 49 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 49 },
                            NomeMedico = "Medico 11",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 49 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 49 },
                            UfCrm = "UF-11"
                        },
                        new
                        {
                            PacienteId = "159e62c4-08db-4130-8342-7abb94c1bc18",
                            Cid = "CID-12",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 50 },
                            CrmMedico = 12,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 50 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 50 },
                            NomeMedico = "Medico 12",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 50 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 50 },
                            UfCrm = "UF-12"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("CarteiraCrp")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PsicologoId");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            PsicologoId = "7e08e66d-e081-4acc-b1c7-b806e10522b8",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 49 },
                            Crp = "CRP-1",
                            Descricao = "Psicologo 1",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "faec9de0-ccd8-48d5-9e6f-090a39f7bc5b",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 50 },
                            Crp = "CRP-2",
                            Descricao = "Psicologo 2",
                            Especialidade = "Terapia Cognitivo Comportamental"
                        },
                        new
                        {
                            PsicologoId = "e07758fa-e487-4ba5-8632-79e1b62d61d4",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 51 },
                            Crp = "CRP-3",
                            Descricao = "Psicologo 3",
                            Especialidade = "Psicanálise"
                        },
                        new
                        {
                            PsicologoId = "0b5172f7-8900-451a-bef4-9f35308cb8c4",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 52 },
                            Crp = "CRP-4",
                            Descricao = "Psicologo 4",
                            Especialidade = "Psicanálise"
                        },
                        new
                        {
                            PsicologoId = "108fe15f-b6d6-4475-aa8c-a7f8e1533997",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 53 },
                            Crp = "CRP-5",
                            Descricao = "Psicologo 5",
                            Especialidade = "Psicanálise"
                        },
                        new
                        {
                            PsicologoId = "f9f1f037-01d0-4f20-8b21-94de9d1abbce",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 54 },
                            Crp = "CRP-6",
                            Descricao = "Psicologo 6",
                            Especialidade = "Terapia Cognitivo Comportamental"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", "Psicologo")
                        .WithMany("Agendas")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Pacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Psicologos")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Navigation("Pacientes");

                    b.Navigation("Psicologos");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
