// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeurometaOncoAPI.Infraestructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeurometaOncoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240515160114_novasagendas2")]
    partial class novasagendas2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Name = "Psicologo",
                            NormalizedName = "PSICOLOGO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "2f4106df-6cee-42f9-a22e-8d65d994b824",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "b7deb289-28b8-4cb6-8f0d-c1845aff8421",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "d008bf53-5d61-41de-96e9-877b48d74beb",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("PsicologoId", "Data", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            PsicologoId = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 414, DateTimeKind.Local).AddTicks(4108),
                            PacienteId = "2f4106df-6cee-42f9-a22e-8d65d994b824",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 414, DateTimeKind.Local).AddTicks(4150),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 414, DateTimeKind.Local).AddTicks(4144),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 414, DateTimeKind.Local).AddTicks(4189),
                            PacienteId = "2f4106df-6cee-42f9-a22e-8d65d994b824"
                        },
                        new
                        {
                            PsicologoId = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 414, DateTimeKind.Local).AddTicks(4199),
                            PacienteId = "2f4106df-6cee-42f9-a22e-8d65d994b824"
                        },
                        new
                        {
                            PsicologoId = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 494, DateTimeKind.Local).AddTicks(4321),
                            PacienteId = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 494, DateTimeKind.Local).AddTicks(4486),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 494, DateTimeKind.Local).AddTicks(4338),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 494, DateTimeKind.Local).AddTicks(4520),
                            PacienteId = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e"
                        },
                        new
                        {
                            PsicologoId = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 494, DateTimeKind.Local).AddTicks(4550),
                            PacienteId = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e"
                        },
                        new
                        {
                            PsicologoId = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 565, DateTimeKind.Local).AddTicks(2826),
                            PacienteId = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 565, DateTimeKind.Local).AddTicks(2843),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 565, DateTimeKind.Local).AddTicks(2838),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 565, DateTimeKind.Local).AddTicks(2860),
                            PacienteId = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d"
                        },
                        new
                        {
                            PsicologoId = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 565, DateTimeKind.Local).AddTicks(2950),
                            PacienteId = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d"
                        },
                        new
                        {
                            PsicologoId = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 631, DateTimeKind.Local).AddTicks(5320),
                            PacienteId = "b7deb289-28b8-4cb6-8f0d-c1845aff8421",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 631, DateTimeKind.Local).AddTicks(5336),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 631, DateTimeKind.Local).AddTicks(5323),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 631, DateTimeKind.Local).AddTicks(5352),
                            PacienteId = "b7deb289-28b8-4cb6-8f0d-c1845aff8421"
                        },
                        new
                        {
                            PsicologoId = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 631, DateTimeKind.Local).AddTicks(5357),
                            PacienteId = "b7deb289-28b8-4cb6-8f0d-c1845aff8421"
                        },
                        new
                        {
                            PsicologoId = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 714, DateTimeKind.Local).AddTicks(5378),
                            PacienteId = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 714, DateTimeKind.Local).AddTicks(5415),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 714, DateTimeKind.Local).AddTicks(5388),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 714, DateTimeKind.Local).AddTicks(5457),
                            PacienteId = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2"
                        },
                        new
                        {
                            PsicologoId = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 714, DateTimeKind.Local).AddTicks(5465),
                            PacienteId = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2"
                        },
                        new
                        {
                            PsicologoId = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            Data = new DateTime(2024, 5, 14, 13, 1, 13, 799, DateTimeKind.Local).AddTicks(5958),
                            PacienteId = "d008bf53-5d61-41de-96e9-877b48d74beb",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 14, 14, 1, 13, 799, DateTimeKind.Local).AddTicks(6126),
                            DataInicio = new DateTime(2024, 5, 14, 13, 1, 13, 799, DateTimeKind.Local).AddTicks(5963),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            Data = new DateTime(2024, 5, 15, 13, 1, 13, 799, DateTimeKind.Local).AddTicks(6142),
                            PacienteId = "d008bf53-5d61-41de-96e9-877b48d74beb"
                        },
                        new
                        {
                            PsicologoId = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            Data = new DateTime(2024, 5, 16, 13, 1, 13, 799, DateTimeKind.Local).AddTicks(6272),
                            PacienteId = "d008bf53-5d61-41de-96e9-877b48d74beb"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3b5611ab-5b4d-4967-b861-54c59df6273c",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 1",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEBEdKhIHzg+cHbkXbHRZbiYFXsbp30+El9H7ASVpE7/igYieVZbAT+ug3NX+m1eShA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 12, 877, DateTimeKind.Local).AddTicks(2043),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "61559cea-4d23-41a8-a497-6e8ec22a18ec",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 2",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEDLt+nazC4rD5s1mGpaagwauwPpDyRfIRsbOKH+eD6KSPMJkTJON8G0+k8tR/0zx5Q==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 12, 959, DateTimeKind.Local).AddTicks(615),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a393567d-d563-4945-9aa0-ca61462ecfa2",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 3",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAED/m4L9r+bU3yefnPC4xp3SOydjgKkVzTs8GO++KB5ZkA3kCjXCDiqilcpxZmBtrAw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 54, DateTimeKind.Local).AddTicks(7386),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1dfbb251-d112-431b-839a-ceb1d96bcd1f",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 4",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEKm/VvDEvmv+9z+xd7rXD14Zk80eT6I2A5RKDEj0kYaOqSO0ANQBM2eFKLwtEb1Vcg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 155, DateTimeKind.Local).AddTicks(8816),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ef854e53-8ff9-4cfd-985e-33a2515a0516",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 5",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEH9SO2QLksXnBdBMbw27exCszdFBQ2kw5ZWV9adN5gauMs63BznVF05wnZvbz2QpSg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 243, DateTimeKind.Local).AddTicks(7985),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4af890f6-c2cc-45b7-aa00-6f9930d74a1a",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 6",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEGKQZJ2Ytpk0xvn2Fu9GXkSeeBmv+ROtrSdN32NbNbndisFM5L9uCDb9GdXluu+NEg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 327, DateTimeKind.Local).AddTicks(9966),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "2f4106df-6cee-42f9-a22e-8d65d994b824",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7a77f1bd-86f2-4e4b-91c0-9085ee0dbe62",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 7",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEOfGFacpw09n3+28EABxZ9b0TOE9IRvRnXZVt/psUElfH95ynPoav7Eb7E6lEcK5/A==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 414, DateTimeKind.Local).AddTicks(3275),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5201e473-d91d-4313-b640-1cf9389c66a5",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 8",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEKDiHGE3J5JYdihUp8zZFlAbxnsITjHNfO/7l4muZp4/JNd6t2lVeOULhgWtEwwD/Q==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 494, DateTimeKind.Local).AddTicks(3780),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6de829b-e778-428e-aa6e-335e4cf49779",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 9",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEKCSHLRmtmCeoGuGnXC0U8YZ+ls/sWNhrgTVgpmyCg4f1MVQxWKinOoQz4QPY7UmIA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 565, DateTimeKind.Local).AddTicks(2603),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "b7deb289-28b8-4cb6-8f0d-c1845aff8421",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "860284d2-f029-4e0a-bf3c-a82b0c3fd67c",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 10",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEMQje7LpS6942OVlz6a2eYklFn4sxqMmi3d0a9m1/00eY5BDEzqFQriEUANDFUlogg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 631, DateTimeKind.Local).AddTicks(4211),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c72de184-130a-4175-8ac8-9545d79bbf5b",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 11",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAENZuGBm17KGCkACKUs63bCQgsye2oSJ+SYKrR2Zl0eJLLGTSucHIJSlibXxupdPipA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 714, DateTimeKind.Local).AddTicks(4790),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "d008bf53-5d61-41de-96e9-877b48d74beb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a287d6c-f269-4cf7-a46f-35549a406474",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 12",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAENJiCEOSWBxrlUdkyha7Rw1x9kORPOcDdqPqK+nW+XQXia0oWs2zt4i+rFxP79mrSQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 15, 13, 1, 13, 799, DateTimeKind.Local).AddTicks(5555),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12",
                            role = "Paciente"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.ExampleEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ComprovanteResidencia")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoRgFrente")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("FotoRgVerso")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PDFFormatado")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RelatorioMedico")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = "2f4106df-6cee-42f9-a22e-8d65d994b824",
                            Cid = "CID-7",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 55 },
                            CrmMedico = 7,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 55 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 55 },
                            NomeMedico = "Medico 7",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 55 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 55 },
                            UfCrm = "UF-7"
                        },
                        new
                        {
                            PacienteId = "3f38348a-bf9d-4ed5-97af-a09cc965ca2e",
                            Cid = "CID-8",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 56 },
                            CrmMedico = 8,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 56 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 56 },
                            NomeMedico = "Medico 8",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 56 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 56 },
                            UfCrm = "UF-8"
                        },
                        new
                        {
                            PacienteId = "10c0fcd0-efa0-453f-bdfd-9dc231bdea0d",
                            Cid = "CID-9",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 57 },
                            CrmMedico = 9,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 57 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 57 },
                            NomeMedico = "Medico 9",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 57 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 57 },
                            UfCrm = "UF-9"
                        },
                        new
                        {
                            PacienteId = "b7deb289-28b8-4cb6-8f0d-c1845aff8421",
                            Cid = "CID-10",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 48 },
                            CrmMedico = 10,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 48 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 48 },
                            NomeMedico = "Medico 10",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 48 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 48 },
                            UfCrm = "UF-10"
                        },
                        new
                        {
                            PacienteId = "d6d527ad-d610-40d6-9f8b-0da55ba1d2e2",
                            Cid = "CID-11",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 49 },
                            CrmMedico = 11,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 49 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 49 },
                            NomeMedico = "Medico 11",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 49 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 49 },
                            UfCrm = "UF-11"
                        },
                        new
                        {
                            PacienteId = "d008bf53-5d61-41de-96e9-877b48d74beb",
                            Cid = "CID-12",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 50 },
                            CrmMedico = 12,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 50 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 50 },
                            NomeMedico = "Medico 12",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 50 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 50 },
                            UfCrm = "UF-12"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("CarteiraCrp")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PsicologoId");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            PsicologoId = "46cc5a6f-e612-42ca-a969-bb6ca507ec71",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 49 },
                            Crp = "CRP-1",
                            Descricao = "Psicologo 1",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "767351ac-1687-46d0-b7fe-9e64f801c009",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 50 },
                            Crp = "CRP-2",
                            Descricao = "Psicologo 2",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "d26a8f97-bfc2-4cdc-b3c0-b9fa998ad5f9",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 51 },
                            Crp = "CRP-3",
                            Descricao = "Psicologo 3",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "66a805db-f7f6-4948-8558-1c2abdd7cf2c",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 52 },
                            Crp = "CRP-4",
                            Descricao = "Psicologo 4",
                            Especialidade = "Terapia Cognitivo Comportamental"
                        },
                        new
                        {
                            PsicologoId = "a58404da-ceff-4fd2-9ec4-d749a0e136f7",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 53 },
                            Crp = "CRP-5",
                            Descricao = "Psicologo 5",
                            Especialidade = "Psicanálise"
                        },
                        new
                        {
                            PsicologoId = "f95747e3-80c2-4261-a1dc-e3e0dd773d57",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 54 },
                            Crp = "CRP-6",
                            Descricao = "Psicologo 6",
                            Especialidade = "Psicanálise"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", "Psicologo")
                        .WithMany("Agendas")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Pacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Psicologos")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Navigation("Pacientes");

                    b.Navigation("Psicologos");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
