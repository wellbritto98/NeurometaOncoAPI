// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeurometaOncoAPI.Infraestructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeurometaOncoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240520202743_userfields")]
    partial class userfields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Name = "Psicologo",
                            NormalizedName = "PSICOLOGO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "32bd932b-17dc-4776-8d19-47aa6e507cd8",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "0cd1cefe-8d05-43e5-a873-d0950dc60d52",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "0ec18f49-c71a-4c09-b107-7ca97d7cde73",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "7f134669-b7c8-40d6-836d-2456f41b6dcc",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "48da0069-7d68-4a2e-9759-118abfd9e539",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("PsicologoId", "Data", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendas");

                    b.HasData(
                        new
                        {
                            PsicologoId = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 372, DateTimeKind.Local).AddTicks(1927),
                            PacienteId = "32bd932b-17dc-4776-8d19-47aa6e507cd8",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 372, DateTimeKind.Local).AddTicks(1953),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 372, DateTimeKind.Local).AddTicks(1947),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 372, DateTimeKind.Local).AddTicks(1984),
                            PacienteId = "32bd932b-17dc-4776-8d19-47aa6e507cd8"
                        },
                        new
                        {
                            PsicologoId = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 372, DateTimeKind.Local).AddTicks(2005),
                            PacienteId = "32bd932b-17dc-4776-8d19-47aa6e507cd8"
                        },
                        new
                        {
                            PsicologoId = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 438, DateTimeKind.Local).AddTicks(3117),
                            PacienteId = "0cd1cefe-8d05-43e5-a873-d0950dc60d52",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 438, DateTimeKind.Local).AddTicks(3138),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 438, DateTimeKind.Local).AddTicks(3133),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 438, DateTimeKind.Local).AddTicks(3178),
                            PacienteId = "0cd1cefe-8d05-43e5-a873-d0950dc60d52"
                        },
                        new
                        {
                            PsicologoId = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 438, DateTimeKind.Local).AddTicks(3209),
                            PacienteId = "0cd1cefe-8d05-43e5-a873-d0950dc60d52"
                        },
                        new
                        {
                            PsicologoId = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 510, DateTimeKind.Local).AddTicks(6552),
                            PacienteId = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 510, DateTimeKind.Local).AddTicks(6714),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 510, DateTimeKind.Local).AddTicks(6698),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 510, DateTimeKind.Local).AddTicks(8565),
                            PacienteId = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b"
                        },
                        new
                        {
                            PsicologoId = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 510, DateTimeKind.Local).AddTicks(8615),
                            PacienteId = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b"
                        },
                        new
                        {
                            PsicologoId = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 581, DateTimeKind.Local).AddTicks(5316),
                            PacienteId = "0ec18f49-c71a-4c09-b107-7ca97d7cde73",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 581, DateTimeKind.Local).AddTicks(5339),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 581, DateTimeKind.Local).AddTicks(5334),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 581, DateTimeKind.Local).AddTicks(5374),
                            PacienteId = "0ec18f49-c71a-4c09-b107-7ca97d7cde73"
                        },
                        new
                        {
                            PsicologoId = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 581, DateTimeKind.Local).AddTicks(5382),
                            PacienteId = "0ec18f49-c71a-4c09-b107-7ca97d7cde73"
                        },
                        new
                        {
                            PsicologoId = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 649, DateTimeKind.Local).AddTicks(1693),
                            PacienteId = "7f134669-b7c8-40d6-836d-2456f41b6dcc",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 649, DateTimeKind.Local).AddTicks(1708),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 649, DateTimeKind.Local).AddTicks(1698),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 649, DateTimeKind.Local).AddTicks(1723),
                            PacienteId = "7f134669-b7c8-40d6-836d-2456f41b6dcc"
                        },
                        new
                        {
                            PsicologoId = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 649, DateTimeKind.Local).AddTicks(1726),
                            PacienteId = "7f134669-b7c8-40d6-836d-2456f41b6dcc"
                        },
                        new
                        {
                            PsicologoId = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            Data = new DateTime(2024, 5, 19, 17, 27, 42, 713, DateTimeKind.Local).AddTicks(9242),
                            PacienteId = "48da0069-7d68-4a2e-9759-118abfd9e539",
                            Comentario = "Consulta concluída",
                            DataFim = new DateTime(2024, 5, 19, 18, 27, 42, 713, DateTimeKind.Local).AddTicks(9256),
                            DataInicio = new DateTime(2024, 5, 19, 17, 27, 42, 713, DateTimeKind.Local).AddTicks(9247),
                            Nota = 10
                        },
                        new
                        {
                            PsicologoId = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            Data = new DateTime(2024, 5, 20, 17, 27, 42, 713, DateTimeKind.Local).AddTicks(9276),
                            PacienteId = "48da0069-7d68-4a2e-9759-118abfd9e539"
                        },
                        new
                        {
                            PsicologoId = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            Data = new DateTime(2024, 5, 21, 17, 27, 42, 713, DateTimeKind.Local).AddTicks(9291),
                            PacienteId = "48da0069-7d68-4a2e-9759-118abfd9e539"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FotoPerfil")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Rg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "11765411-d91d-4a4f-bc5f-c18631920d90",
                            Cpf = "179523941",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 1",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrArRP67+oXQgYBTUGqFuvr4ozSMBjylP3xasR+j+2vEFEF3dB77D3OHbUe8+OBIA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 41, 936, DateTimeKind.Local).AddTicks(4667),
                            Rg = "4899908",
                            SecurityStamp = "",
                            Telefone = "(79) 924090560",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86bf45e1-a92f-46ec-9402-e63647eb7b96",
                            Cpf = "475554808",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 2",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAELuteqUNZr/Wnx5ObAZJj7lskxEwDwF/VHQkTzLZZtZ6+JZQkOBsfIQ8psv+/a1+pw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 7, DateTimeKind.Local).AddTicks(5431),
                            Rg = "2837147",
                            SecurityStamp = "",
                            Telefone = "(79) 931325570",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c71330cd-4d5e-410c-98d8-2645bdfa0ed7",
                            Cpf = "100658849",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 3",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEKaoUeEaBduST8EhhWUnyja1LeoJwjoy0s5xLvHisrcmftXq9PlBo11U4Xl0GEARSA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 80, DateTimeKind.Local).AddTicks(2620),
                            Rg = "2936999",
                            SecurityStamp = "",
                            Telefone = "(79) 919320255",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f4c2362-bfe7-437d-bd13-59d45cd7c9a3",
                            Cpf = "480042652",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 4",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAEN10xrLqdf9IKwXyvsYifjid7zJuuWjMG1Vp9kJ+wHh3ZuePNzNDE69alrUmF6/ivg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 156, DateTimeKind.Local).AddTicks(528),
                            Rg = "3953747",
                            SecurityStamp = "",
                            Telefone = "(79) 970836070",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8175b587-3cd5-4a21-9bd1-09f39ace0e90",
                            Cpf = "806596778",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 5",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEG1hOY+nDhYkcXZAzDrIKwwnIf7hIsTzgNXAyE7PBAfXyDANerdWuXEnSEmjkcEk5g==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 227, DateTimeKind.Local).AddTicks(5228),
                            Rg = "7467661",
                            SecurityStamp = "",
                            Telefone = "(79) 993187834",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "692f0ca0-d866-4b74-80cf-28da1cdae462",
                            Cpf = "717440467",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 6",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEJtjQ4HSQ0AdIjLOagRYfVnvduMWKx0PJdg2zbk7ZHOEWaSytQaV0f2dPoL8GSHqaA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 292, DateTimeKind.Local).AddTicks(6756),
                            Rg = "6883109",
                            SecurityStamp = "",
                            Telefone = "(79) 984500412",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "32bd932b-17dc-4776-8d19-47aa6e507cd8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a59cda5-d790-467a-b11c-3c27421c840e",
                            Cpf = "921780754",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 7",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAEJZT1ZjjrscwrbzxyWrbL9VuyUDK/p86A0NLSqDKmVW4XbTK+wd/BKccWHoLzL47RA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 372, DateTimeKind.Local).AddTicks(1371),
                            Rg = "9644407",
                            SecurityStamp = "",
                            Telefone = "(79) 965936398",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "0cd1cefe-8d05-43e5-a873-d0950dc60d52",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f9495f9-c121-4723-b70c-c8b2f2966fc5",
                            Cpf = "818708025",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 8",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEI8YgU6LAaKntPFvmI5DRFEEzb6X5UK0yUL30LNhTQPkUTatDGh2A+unBt6D/XwnXw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 438, DateTimeKind.Local).AddTicks(2621),
                            Rg = "7750570",
                            SecurityStamp = "",
                            Telefone = "(79) 964919636",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9e3909b-3984-470f-9c0d-c3c45f35af0e",
                            Cpf = "433126107",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 9",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEN8DWkvdc6itQW0re1dL1yvxDxMkW+r+gXdjztqyniEBQV8gQVDMt19Uw/Jp4+U+lQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 510, DateTimeKind.Local).AddTicks(5976),
                            Rg = "7735958",
                            SecurityStamp = "",
                            Telefone = "(79) 924205586",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "0ec18f49-c71a-4c09-b107-7ca97d7cde73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9ddcf0ec-1558-4af6-9416-17a84ab200bf",
                            Cpf = "413188397",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 10",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKlnk3l08DsN90bWNXQ93iuhLR3vPLoc4SYrqGxEeZ1/mjN+Lx1GjZTztCZ6QGbqA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 581, DateTimeKind.Local).AddTicks(4790),
                            Rg = "4631346",
                            SecurityStamp = "",
                            Telefone = "(79) 984503567",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "7f134669-b7c8-40d6-836d-2456f41b6dcc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d43fd16-0542-48bc-bfdf-932ad063c97a",
                            Cpf = "126573043",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 11",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEF8f0gvllKp80FONBr19OX12+usePwL1QrN7+75mvQ4AZR2IwxzUFjdIqjZD3FVLrw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 649, DateTimeKind.Local).AddTicks(1392),
                            Rg = "9437038",
                            SecurityStamp = "",
                            Telefone = "(79) 994777128",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "48da0069-7d68-4a2e-9759-118abfd9e539",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1386a94-aa6f-4ea4-b6c5-131a81f07d39",
                            Cpf = "934720815",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 12",
                            FotoPerfil = "https://static.vecteezy.com/system/resources/previews/009/397/835/non_2x/man-avatar-clipart-illustration-free-png.png",
                            LockoutEnabled = false,
                            Nome = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7QqZ5WOuLUIxwC7r3RJtj8+yxqoOasvJ6NW6C/fo6LpgXFs1A+4xV+1UssziZwPg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 20, 17, 27, 42, 713, DateTimeKind.Local).AddTicks(9010),
                            Rg = "8844343",
                            SecurityStamp = "",
                            Telefone = "(79) 985644652",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12",
                            role = "Paciente"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.ExampleEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ComprovanteResidencia")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoRgFrente")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("FotoRgVerso")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PDFFormatado")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RelatorioMedico")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = "32bd932b-17dc-4776-8d19-47aa6e507cd8",
                            Cid = "CID-7",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 55 },
                            CrmMedico = 7,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 55 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 55 },
                            NomeMedico = "Medico 7",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 55 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 55 },
                            UfCrm = "UF-7"
                        },
                        new
                        {
                            PacienteId = "0cd1cefe-8d05-43e5-a873-d0950dc60d52",
                            Cid = "CID-8",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 56 },
                            CrmMedico = 8,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 56 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 56 },
                            NomeMedico = "Medico 8",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 56 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 56 },
                            UfCrm = "UF-8"
                        },
                        new
                        {
                            PacienteId = "fc7ff103-cb8f-4324-8fa6-e27bf56dd31b",
                            Cid = "CID-9",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 57 },
                            CrmMedico = 9,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 57 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 57 },
                            NomeMedico = "Medico 9",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 57 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 57 },
                            UfCrm = "UF-9"
                        },
                        new
                        {
                            PacienteId = "0ec18f49-c71a-4c09-b107-7ca97d7cde73",
                            Cid = "CID-10",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 48 },
                            CrmMedico = 10,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 48 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 48 },
                            NomeMedico = "Medico 10",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 48 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 48 },
                            UfCrm = "UF-10"
                        },
                        new
                        {
                            PacienteId = "7f134669-b7c8-40d6-836d-2456f41b6dcc",
                            Cid = "CID-11",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 49 },
                            CrmMedico = 11,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 49 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 49 },
                            NomeMedico = "Medico 11",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 49 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 49 },
                            UfCrm = "UF-11"
                        },
                        new
                        {
                            PacienteId = "48da0069-7d68-4a2e-9759-118abfd9e539",
                            Cid = "CID-12",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 50 },
                            CrmMedico = 12,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 50 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 50 },
                            NomeMedico = "Medico 12",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 50 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 50 },
                            UfCrm = "UF-12"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("CarteiraCrp")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Especialidade")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PsicologoId");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            PsicologoId = "9e7d866b-3b8a-4f95-a351-3cd241ebc475",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 49 },
                            Crp = "CRP-1",
                            Descricao = "Psicologo 1",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "3f5942f4-6e3d-4bc1-8c88-2f6b34504e2e",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 50 },
                            Crp = "CRP-2",
                            Descricao = "Psicologo 2",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "9410327a-d9a2-4c17-87ea-c7ec61e2c3b9",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 51 },
                            Crp = "CRP-3",
                            Descricao = "Psicologo 3",
                            Especialidade = "Terceira Especialidade"
                        },
                        new
                        {
                            PsicologoId = "44d5957f-8de6-43ae-9514-73b4648aa004",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 52 },
                            Crp = "CRP-4",
                            Descricao = "Psicologo 4",
                            Especialidade = "Terapia Cognitivo Comportamental"
                        },
                        new
                        {
                            PsicologoId = "9521118d-9c5a-4651-b69a-d56b0d6ce982",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 53 },
                            Crp = "CRP-5",
                            Descricao = "Psicologo 5",
                            Especialidade = "Terapia Cognitivo Comportamental"
                        },
                        new
                        {
                            PsicologoId = "9b3d79ac-d16e-4ebc-804b-f34fd976ffee",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 54 },
                            Crp = "CRP-6",
                            Descricao = "Psicologo 6",
                            Especialidade = "Psicanálise"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", "Psicologo")
                        .WithMany("Agendas")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
