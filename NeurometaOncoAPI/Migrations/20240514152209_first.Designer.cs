// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NeurometaOncoAPI.Infraestructure.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NeurometaOncoAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240514152209_first")]
    partial class first
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7210",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7211",
                            Name = "Paciente",
                            NormalizedName = "PACIENTE"
                        },
                        new
                        {
                            Id = "2c5e174e-3b0e-446f-86af-483d56fd7212",
                            Name = "Psicologo",
                            NormalizedName = "PSICOLOGO"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2b19466e-9f6a-4e53-8f6c-e64a9ced3095",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "5eb0952c-09b9-4571-8b72-291d1479048d",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "726e52ab-2ec8-4f61-bbd5-ac13d8932108",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "26cbbda2-bcaa-4e73-b031-0953441bd130",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "f7f70716-1ad4-433f-b853-dffa71ba3a2a",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "c2a56b59-1faf-4d2f-b8f5-0b4a4d05bd48",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7212"
                        },
                        new
                        {
                            UserId = "c55e6da3-a002-421d-b864-7a3d76e64790",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "a7d2f15d-eff2-4e7d-a474-8afd8da95f21",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "3ed90f9b-e153-47c4-9c75-6945f5d1331c",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "0a49caec-57a9-4d92-b0e1-1f4dfbcaa71b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "68a725a9-ab50-4361-9a91-83da20930103",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        },
                        new
                        {
                            UserId = "6c1318e6-8a6a-4b70-a428-82b2df1dc76b",
                            RoleId = "2c5e174e-3b0e-446f-86af-483d56fd7211"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Data")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnOrder(1);

                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(2);

                    b.Property<string>("Comentario")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataInicio")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("Nota")
                        .HasColumnType("integer");

                    b.HasKey("PsicologoId", "Data", "PacienteId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EnderecoCompleto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("FotoPerfil")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RegisteredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("TokenExpiredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2b19466e-9f6a-4e53-8f6c-e64a9ced3095",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8822187b-68d0-4d4e-aecd-81a00c8b5f89",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user1@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 1",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 1",
                            NormalizedEmail = "USER1@EXAMPLE.COM",
                            NormalizedUserName = "USER1",
                            PasswordHash = "AQAAAAIAAYagAAAAECxIw7mA2d4aCv1WsFGNvRdJ+8vv1OFhlFqHEYWMZ3aF/hIvZPZotOHshr1zYT3hnw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 236, DateTimeKind.Local).AddTicks(3755),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user1",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "5eb0952c-09b9-4571-8b72-291d1479048d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4ac1240-8b33-4e2d-8368-3e1f7cf70308",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 2",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 2",
                            NormalizedEmail = "USER2@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEIf+hk5jGxdzkQdUMb0eJePzeP3YSFc08ovZzy/e+gGS3AUbLFMx8jPX7OqR6Ahggw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 294, DateTimeKind.Local).AddTicks(8791),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user2",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "726e52ab-2ec8-4f61-bbd5-ac13d8932108",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "75540667-a52d-4b43-a341-350c6ea5163a",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user3@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 3",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 3",
                            NormalizedEmail = "USER3@EXAMPLE.COM",
                            NormalizedUserName = "USER3",
                            PasswordHash = "AQAAAAIAAYagAAAAEAQnfgjg8BrA03TcuPkhUAzUsiPE+DMPVyVyPgfaZ1V0NAHe2SDmqYWt7rrhFgVYCQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 352, DateTimeKind.Local).AddTicks(5500),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user3",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "26cbbda2-bcaa-4e73-b031-0953441bd130",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9a4e9c7-ff79-441a-9c3b-51d753c5e7b1",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user4@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 4",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 4",
                            NormalizedEmail = "USER4@EXAMPLE.COM",
                            NormalizedUserName = "USER4",
                            PasswordHash = "AQAAAAIAAYagAAAAENX+aBxNaaMfilnOy7NDEI54kHUoOlFBdkZ/CAgGcFzwidndWoL/XK5cTW/T8M5zzQ==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 413, DateTimeKind.Local).AddTicks(3582),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user4",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "f7f70716-1ad4-433f-b853-dffa71ba3a2a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "52a5e8f4-a907-4f45-a7cc-b05c08dc49a2",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user5@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 5",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 5",
                            NormalizedEmail = "USER5@EXAMPLE.COM",
                            NormalizedUserName = "USER5",
                            PasswordHash = "AQAAAAIAAYagAAAAEE2xRugyc9n7mfk+RIZigPzQXA2uL/C7HX9AXbar+xJvXDzBqLaEqqcxb0BnViZefg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 487, DateTimeKind.Local).AddTicks(4111),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user5",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "c2a56b59-1faf-4d2f-b8f5-0b4a4d05bd48",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "779db3bc-a6e4-4cdc-8fd2-e8ceb6e6d59b",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user6@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 6",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 6",
                            NormalizedEmail = "USER6@EXAMPLE.COM",
                            NormalizedUserName = "USER6",
                            PasswordHash = "AQAAAAIAAYagAAAAEGJz56qCed8NSlDvPHLTJw4TgBKBF/tPYsUIxZqdCB9KWmHvkkysNMb/BYGELu/QuA==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 554, DateTimeKind.Local).AddTicks(2370),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user6",
                            role = "Psicologo"
                        },
                        new
                        {
                            Id = "c55e6da3-a002-421d-b864-7a3d76e64790",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b9a3f3bb-70ff-4d8b-a543-ad1473013f8f",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user7@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 7",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 7",
                            NormalizedEmail = "USER7@EXAMPLE.COM",
                            NormalizedUserName = "USER7",
                            PasswordHash = "AQAAAAIAAYagAAAAELrBmJ+6wJutisGwHdljPXhWf5F4URjAV1ebviFwpuTDK6BISphXw/kTaXUBAWng+A==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 618, DateTimeKind.Local).AddTicks(5043),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user7",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "a7d2f15d-eff2-4e7d-a474-8afd8da95f21",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a70bb794-767c-4cf0-9371-87ecbf7d86f0",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user8@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 8",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 8",
                            NormalizedEmail = "USER8@EXAMPLE.COM",
                            NormalizedUserName = "USER8",
                            PasswordHash = "AQAAAAIAAYagAAAAEEEoa0jx4iPTTugYrbNZOJz8TLQo5eWKfWbXfvt0ZwLyVVC8qVGsFxROLHeDyVKW0w==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 676, DateTimeKind.Local).AddTicks(7096),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user8",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "3ed90f9b-e153-47c4-9c75-6945f5d1331c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "803b35cf-0821-4ad3-913f-408ebd1b8571",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user9@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 9",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 9",
                            NormalizedEmail = "USER9@EXAMPLE.COM",
                            NormalizedUserName = "USER9",
                            PasswordHash = "AQAAAAIAAYagAAAAEMU0uguq8QWFIjV27U22U2fl14MJx+546cADd4C7MIQDFkYR3pE/ANPPsLowIgwMmw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 734, DateTimeKind.Local).AddTicks(7099),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user9",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "0a49caec-57a9-4d92-b0e1-1f4dfbcaa71b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7fa0983a-aaec-420d-91eb-b290a4122bd0",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user10@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 10",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 10",
                            NormalizedEmail = "USER10@EXAMPLE.COM",
                            NormalizedUserName = "USER10",
                            PasswordHash = "AQAAAAIAAYagAAAAEGVU7c8NHlqeaxa+AX1Lg4jYWLW2m8zmrP8YA7aK7KU3CfLd8o4HH+IoVRPsevGWdg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 794, DateTimeKind.Local).AddTicks(6112),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user10",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "68a725a9-ab50-4361-9a91-83da20930103",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1e68a79-74f4-4670-ac75-46b6a4c529e7",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user11@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 11",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 11",
                            NormalizedEmail = "USER11@EXAMPLE.COM",
                            NormalizedUserName = "USER11",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQZu7ppFILirVOO7dAzVuqnMiL2x8YzI+x5C8I8MXNxoJnp+gcx9SoaAOkXmyzqpg==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 850, DateTimeKind.Local).AddTicks(9575),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user11",
                            role = "Paciente"
                        },
                        new
                        {
                            Id = "6c1318e6-8a6a-4b70-a428-82b2df1dc76b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb2af7a4-7ee4-4500-926c-883990a2dc13",
                            DataNascimento = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user12@example.com",
                            EmailConfirmed = true,
                            EnderecoCompleto = "Endereço 12",
                            FotoPerfil = new byte[] { 104, 116, 116, 112, 115, 58, 47, 47, 115, 116, 97, 116, 105, 99, 46, 118, 101, 99, 116, 101, 101, 122, 121, 46, 99, 111, 109, 47, 115, 121, 115, 116, 101, 109, 47, 114, 101, 115, 111, 117, 114, 99, 101, 115, 47, 112, 114, 101, 118, 105, 101, 119, 115, 47, 48, 48, 57, 47, 51, 57, 55, 47, 56, 51, 53, 47, 110, 111, 110, 95, 50, 120, 47, 109, 97, 110, 45, 97, 118, 97, 116, 97, 114, 45, 99, 108, 105, 112, 97, 114, 116, 45, 105, 108, 108, 117, 115, 116, 114, 97, 116, 105, 111, 110, 45, 102, 114, 101, 101, 45, 112, 110, 103, 46, 112, 110, 103 },
                            LockoutEnabled = false,
                            Nome = "User 12",
                            NormalizedEmail = "USER12@EXAMPLE.COM",
                            NormalizedUserName = "USER12",
                            PasswordHash = "AQAAAAIAAYagAAAAEBW7IAL98GpTyvcHRRWjJweub/f/1FYA4hmMLc+btQRkhNe5Dkrs6Z6VkJoFWyA4mw==",
                            PhoneNumberConfirmed = false,
                            RefreshToken = "",
                            RegisteredAt = new DateTime(2024, 5, 14, 12, 22, 8, 911, DateTimeKind.Local).AddTicks(2174),
                            SecurityStamp = "",
                            TokenCreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TokenExpiredAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TwoFactorEnabled = false,
                            UserName = "user12",
                            role = "Paciente"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.ExampleEntity", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Name");

                    b.ToTable("Examples");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Property<string>("PacienteId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<string>("Cid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("ComprovanteResidencia")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("CrmMedico")
                        .HasColumnType("integer");

                    b.Property<byte[]>("FotoRgFrente")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("FotoRgVerso")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("NomeMedico")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PDFFormatado")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("RelatorioMedico")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("UfCrm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PacienteId");

                    b.ToTable("Pacientes");

                    b.HasData(
                        new
                        {
                            PacienteId = "c55e6da3-a002-421d-b864-7a3d76e64790",
                            Cid = "CID-7",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 55 },
                            CrmMedico = 7,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 55 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 55 },
                            NomeMedico = "Medico 7",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 55 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 55 },
                            UfCrm = "UF-7"
                        },
                        new
                        {
                            PacienteId = "a7d2f15d-eff2-4e7d-a474-8afd8da95f21",
                            Cid = "CID-8",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 56 },
                            CrmMedico = 8,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 56 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 56 },
                            NomeMedico = "Medico 8",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 56 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 56 },
                            UfCrm = "UF-8"
                        },
                        new
                        {
                            PacienteId = "3ed90f9b-e153-47c4-9c75-6945f5d1331c",
                            Cid = "CID-9",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 57 },
                            CrmMedico = 9,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 57 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 57 },
                            NomeMedico = "Medico 9",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 57 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 57 },
                            UfCrm = "UF-9"
                        },
                        new
                        {
                            PacienteId = "0a49caec-57a9-4d92-b0e1-1f4dfbcaa71b",
                            Cid = "CID-10",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 48 },
                            CrmMedico = 10,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 48 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 48 },
                            NomeMedico = "Medico 10",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 48 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 48 },
                            UfCrm = "UF-10"
                        },
                        new
                        {
                            PacienteId = "68a725a9-ab50-4361-9a91-83da20930103",
                            Cid = "CID-11",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 49 },
                            CrmMedico = 11,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 49 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 49 },
                            NomeMedico = "Medico 11",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 49 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 49 },
                            UfCrm = "UF-11"
                        },
                        new
                        {
                            PacienteId = "6c1318e6-8a6a-4b70-a428-82b2df1dc76b",
                            Cid = "CID-12",
                            ComprovanteResidencia = new byte[] { 67, 111, 109, 112, 114, 111, 118, 97, 110, 116, 101, 32, 82, 101, 115, 105, 100, 101, 110, 99, 105, 97, 32, 49, 50 },
                            CrmMedico = 12,
                            FotoRgFrente = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 70, 114, 101, 110, 116, 101, 32, 49, 50 },
                            FotoRgVerso = new byte[] { 70, 111, 116, 111, 32, 82, 71, 32, 86, 101, 114, 115, 111, 32, 49, 50 },
                            NomeMedico = "Medico 12",
                            PDFFormatado = new byte[] { 80, 68, 70, 32, 70, 111, 114, 109, 97, 116, 97, 100, 111, 32, 49, 50 },
                            RelatorioMedico = new byte[] { 82, 101, 108, 97, 116, 111, 114, 105, 111, 32, 77, 101, 100, 105, 99, 111, 32, 49, 50 },
                            UfCrm = "UF-12"
                        });
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Property<string>("PsicologoId")
                        .HasColumnType("text")
                        .HasColumnOrder(0);

                    b.Property<byte[]>("CarteiraCrp")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Crp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PsicologoId");

                    b.ToTable("Psicologos");

                    b.HasData(
                        new
                        {
                            PsicologoId = "2b19466e-9f6a-4e53-8f6c-e64a9ced3095",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 49 },
                            Crp = "CRP-1",
                            Descricao = "Psicologo 1"
                        },
                        new
                        {
                            PsicologoId = "5eb0952c-09b9-4571-8b72-291d1479048d",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 50 },
                            Crp = "CRP-2",
                            Descricao = "Psicologo 2"
                        },
                        new
                        {
                            PsicologoId = "726e52ab-2ec8-4f61-bbd5-ac13d8932108",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 51 },
                            Crp = "CRP-3",
                            Descricao = "Psicologo 3"
                        },
                        new
                        {
                            PsicologoId = "26cbbda2-bcaa-4e73-b031-0953441bd130",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 52 },
                            Crp = "CRP-4",
                            Descricao = "Psicologo 4"
                        },
                        new
                        {
                            PsicologoId = "f7f70716-1ad4-433f-b853-dffa71ba3a2a",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 53 },
                            Crp = "CRP-5",
                            Descricao = "Psicologo 5"
                        },
                        new
                        {
                            PsicologoId = "c2a56b59-1faf-4d2f-b8f5-0b4a4d05bd48",
                            CarteiraCrp = new byte[] { 67, 97, 114, 116, 101, 105, 114, 97, 32, 67, 82, 80, 32, 54 },
                            Crp = "CRP-6",
                            Descricao = "Psicologo 6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Agenda", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", "Paciente")
                        .WithMany("Agendas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", "Psicologo")
                        .WithMany("Agendas")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Psicologo");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Pacientes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.HasOne("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", "User")
                        .WithMany("Psicologos")
                        .HasForeignKey("PsicologoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Auth.User", b =>
                {
                    b.Navigation("Pacientes");

                    b.Navigation("Psicologos");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Paciente", b =>
                {
                    b.Navigation("Agendas");
                });

            modelBuilder.Entity("NeurometaOncoAPI.Domain.DomainModels.Models.Psicologo", b =>
                {
                    b.Navigation("Agendas");
                });
#pragma warning restore 612, 618
        }
    }
}
